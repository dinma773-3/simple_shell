#include "shell.h"

/**
 * _myenv - displays the current environment variable
 * @info: structure holding possible arguments
 *
 * Return: Always 0
 */
int _myenv(info_t *info)
{
  print_list_str(info->env);
  return (0);
}

/**
 * _getenv - retrieve the value of an environment variable
 * @info: structure potentially contains additional arguments
 * @name: string parameter representing the name of the environment
 *
 * Return: the value
 */
char *_getenv(info_t *info, const char *name)
{
  list_t *nodes = info->env;
  char *i;

  while (nodes)
    {
      i = starts_with(nodes->str, name);
      if (i && *i)
	return (i);
      nodes = nodes->next;
    }
  return (NULL);
}

/**
 * _mysetenv - initialize a new environment variable,
 *             or modify an existing one
 * @info: structure containing potential arguments
 *
 *  Return: Always 0
 */
int _mysetenv(info_t *info)
{
  if (info->argc != 3)
    {
      _eputs("Incorrect number of arguements\n");
      return (1);
    }

  if (_setenv(info->argv[1], info->argv[2]) != 0)
    return (1);

  return (0);
}

/**
 * _myunsetenv - removes an environment variable
 * @info: structure containing potential arguments
 *
 * Return: Always 0
 */
int _myunsetenv(info_t *info)
{
  int j;

  if (info->argc < 2)
    {
      _eputs("Too few arguements.\n");
      return (1);
    }

  for (j = 1; j <= info->argc; j++)
    _unsetenv(info, info->argv[j]);

  return (0);
}

/**
 * populate_env_list - populates an env variable linked list
 * @info: structure containing potential arguments
 *
 * Return: Always 0
 */
int populate_env_list(info_t *info)
{
  list_t *node = NULL;
  size_t j;

  for (j = 0; environ[j]; j++)
    add_node_end(&node, environ[j], 0);

  info->env = node;
  return (0);
}
